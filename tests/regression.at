# Bison Regressions.                               -*- Autotest -*-
# Copyright 2001, 2002 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.

AT_BANNER([[Regression tests.]])


## ---------------- ##
## Braces parsing.  ##
## ---------------- ##


AT_SETUP([braces parsing])

AT_DATA([input.y],
[[/* Bison used to swallow the character after `}'. */

%%
exp: { tests = {{{{{{{{{{}}}}}}}}}}; };
%%
]])

AT_CHECK([bison -v input.y -o input.c], 0, ignore, ignore)

AT_CHECK([fgrep 'tests = {{{{{{{{{{}}}}}}}}}};' input.c], 0, [ignore])

AT_CLEANUP


## ------------------ ##
## Duplicate string.  ##
## ------------------ ##


AT_SETUP([Duplicate string])

AT_DATA([input.y],
[[/* `Bison -v' used to dump core when two tokens are defined with the same
   string, as LE and GE below. */

%token NUM
%token LE "<="
%token GE "<="

%%
exp: '(' exp ')' | NUM ;
%%
]])

AT_CHECK([bison -v input.y -o input.c], 0, ignore, ignore)

AT_CLEANUP


## ------------------- ##
## Rule Line Numbers.  ##
## ------------------- ##

AT_SETUP([Rule Line Numbers])

AT_DATA([input.y],
[[%%
expr:
'a'

{

}

'b'

{

}

|


{


}

'c'

{

};
]])

AT_CHECK([bison input.y -o input.c -v], 0, [], [])

# Check the contents of the report.
AT_CHECK([cat input.output], [],
[[Grammar

  Number, Line, Rule
    0   2 $axiom -> expr $
    1   2 @1 -> /* empty */
    2   2 expr -> 'a' @1 'b'
    3  15 @2 -> /* empty */
    4  15 expr -> @2 'c'


Terminals, with rules where they appear

$ (0) 0
'a' (97) 2
'b' (98) 2
'c' (99) 4
error (256)


Nonterminals, with rules where they appear

$axiom (6)
    on left: 0
expr (7)
    on left: 2 4, on right: 0
@1 (8)
    on left: 1, on right: 2
@2 (9)
    on left: 3, on right: 4


state 0

    $axiom  ->  . expr $   (rule 0)

    'a' 	shift, and go to state 1

    $default	reduce using rule 3 (@2)

    expr	go to state 2
    @2  	go to state 3



state 1

    expr  ->  'a' . @1 'b'   (rule 2)

    $default	reduce using rule 1 (@1)

    @1  	go to state 4



state 2

    $axiom  ->  expr . $   (rule 0)

    $   	shift, and go to state 5



state 3

    expr  ->  @2 . 'c'   (rule 4)

    'c' 	shift, and go to state 6



state 4

    expr  ->  'a' @1 . 'b'   (rule 2)

    'b' 	shift, and go to state 7



state 5

    $axiom  ->  expr $ .   (rule 0)

    $default	accept


state 6

    expr  ->  @2 'c' .   (rule 4)

    $default	reduce using rule 4 (expr)



state 7

    expr  ->  'a' @1 'b' .   (rule 2)

    $default	reduce using rule 2 (expr)



]])

AT_CLEANUP



## ---------------------- ##
## Mixing %token styles.  ##
## ---------------------- ##


AT_SETUP([Mixing %token styles])

# Taken from the documentation.
AT_DATA([input.y],
[[%token  <operator>  OR      "||"
%token  <operator>  LE 134  "<="
%left  OR  "<="
%%
exp: ;
%%
]])

AT_CHECK([bison -v input.y -o input.c], 0, ignore, ignore)

AT_CLEANUP



## ---------------- ##
## Invalid inputs.  ##
## ---------------- ##


AT_SETUP([Invalid inputs])

AT_DATA([input.y],
[[%%
?
default: 'a' }
%{
%&
%a
%-
]])

AT_CHECK([bison input.y], [1], [],
[[input.y:2: invalid input: `?'
input.y:3: invalid input: `}'
input.y:4: invalid input: `%{'
input.y:5: invalid input: `%&'
input.y:6: invalid input: `%a'
input.y:7: invalid input: `%-'
]])

AT_CLEANUP



## -------------------- ##
## Invalid %directive.  ##
## -------------------- ##


AT_SETUP([Invalid %directive])

AT_DATA([input.y],
[[%invalid
]])

AT_CHECK([bison input.y], [1], [],
[[input.y:1: unrecognized: %invalid
input.y:1:    Skipping to next %
input.y:2: fatal error: no input grammar
]])

AT_CLEANUP



## -------------- ##
## Web2c Report.  ##
## -------------- ##

# The generation of the reduction was once wrong in Bison, and made it
# miss some reductions.  In the following test case, the reduction on
# `undef_id_tok' in state 1 was missing.  This is stripped down from
# the actual web2c.y.

AT_SETUP([Web2c Report])

AT_DATA([input.y],
[[%token	undef_id_tok const_id_tok

%start CONST_DEC_PART

%%
CONST_DEC_PART:
         CONST_DEC_LIST
        ;

CONST_DEC_LIST:
	  CONST_DEC
        | CONST_DEC_LIST CONST_DEC
        ;

CONST_DEC:
	  { } undef_id_tok '=' const_id_tok ';'
        ;
%%

]])

AT_CHECK([bison -v input.y])

AT_CHECK([sed -n 's/  *$//;/^$/!p' input.output], 0,
[[Grammar
  Number, Line, Rule
    0   6 $axiom -> CONST_DEC_PART $
    1   6 CONST_DEC_PART -> CONST_DEC_LIST
    2  10 CONST_DEC_LIST -> CONST_DEC
    3  12 CONST_DEC_LIST -> CONST_DEC_LIST CONST_DEC
    4  15 @1 -> /* empty */
    5  15 CONST_DEC -> @1 undef_id_tok '=' const_id_tok ';'
Terminals, with rules where they appear
$ (0) 0
';' (59) 5
'=' (61) 5
error (256)
undef_id_tok (257) 5
const_id_tok (258) 5
Nonterminals, with rules where they appear
$axiom (7)
    on left: 0
CONST_DEC_PART (8)
    on left: 1, on right: 0
CONST_DEC_LIST (9)
    on left: 2 3, on right: 1 3
CONST_DEC (10)
    on left: 5, on right: 2 3
@1 (11)
    on left: 4, on right: 5
state 0
    $axiom  ->  . CONST_DEC_PART $   (rule 0)
    $default	reduce using rule 4 (@1)
    CONST_DEC_PART	go to state 1
    CONST_DEC_LIST	go to state 2
    CONST_DEC	go to state 3
    @1  	go to state 4
state 1
    $axiom  ->  CONST_DEC_PART . $   (rule 0)
    $   	shift, and go to state 5
state 2
    CONST_DEC_PART  ->  CONST_DEC_LIST .   (rule 1)
    CONST_DEC_LIST  ->  CONST_DEC_LIST . CONST_DEC   (rule 3)
    undef_id_tok	reduce using rule 4 (@1)
    $default	reduce using rule 1 (CONST_DEC_PART)
    CONST_DEC	go to state 6
    @1  	go to state 4
state 3
    CONST_DEC_LIST  ->  CONST_DEC .   (rule 2)
    $default	reduce using rule 2 (CONST_DEC_LIST)
state 4
    CONST_DEC  ->  @1 . undef_id_tok '=' const_id_tok ';'   (rule 5)
    undef_id_tok	shift, and go to state 7
state 5
    $axiom  ->  CONST_DEC_PART $ .   (rule 0)
    $default	accept
state 6
    CONST_DEC_LIST  ->  CONST_DEC_LIST CONST_DEC .   (rule 3)
    $default	reduce using rule 3 (CONST_DEC_LIST)
state 7
    CONST_DEC  ->  @1 undef_id_tok . '=' const_id_tok ';'   (rule 5)
    '=' 	shift, and go to state 8
state 8
    CONST_DEC  ->  @1 undef_id_tok '=' . const_id_tok ';'   (rule 5)
    const_id_tok	shift, and go to state 9
state 9
    CONST_DEC  ->  @1 undef_id_tok '=' const_id_tok . ';'   (rule 5)
    ';' 	shift, and go to state 10
state 10
    CONST_DEC  ->  @1 undef_id_tok '=' const_id_tok ';' .   (rule 5)
    $default	reduce using rule 5 (CONST_DEC)
]])

AT_CLEANUP


## --------------- ##
## Web2c Actions.  ##
## --------------- ##

# The generation of the mapping `state -> action' was once wrong in
# extremely specific situations.  web2c.y exhibits this situation.
# Below is a stripped version of the grammar.  It looks like one can
# simplify it further, but just don't: it is tuned to exhibit a bug,
# which disapears when applying sane grammar transformations.
#
# It used to be wrong on yydefact only:
#
# static const short yydefact[] =
#  {
# -       2,     0,     1,     0,     0,     2,     3,     2,     5,     4,
# +       2,     0,     1,     0,     0,     0,     3,     2,     5,     4,
#         0,     0
#  };
#
# but let's check all the tables.


AT_SETUP([Web2c Actions])

AT_DATA([input.y],
[[%%
statement:  struct_stat;
struct_stat:  /* empty. */ | if else;
if: "if" "const" "then" statement;
else: "else" statement;
%%
]])

AT_CHECK([bison -v input.y -o input.c])

# Check only the tables.  We don't use --no-parser, because it is
# still to be implemented in the experimental branch of Bison.
AT_CHECK([[sed -n 's/  *$//;/^static const.*\[\] =/,/^}/p' input.c]], 0,
[[static const yy_token_number_type yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6
};
static const short yyprhs[] =
{
       0,     0,     3,     5,     6,     9,    14
};
static const yyrhs_t yyrhs[] =
{
       8,     0,    -1,     9,    -1,    -1,    10,    11,    -1,     3,
       4,     5,     8,    -1,     6,     8,    -1
};
static const short yyrline[] =
{
       0,     2,     2,     3,     3,     4,     5
};
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "\"if\"", "\"const\"", "\"then\"",
  "\"else\"", "$axiom", "statement", "struct_stat", "if", "else", 0
};
static const short yytoknum[] =
{
       0,   256,     2,   257,   258,   259,   260,    -1
};
static const short yyr1[] =
{
       0,     7,     8,     9,     9,    10,    11
};
static const short yyr2[] =
{
       0,     2,     1,     0,     2,     4,     2
};
static const short yydefact[] =
{
       3,     0,     0,     2,     0,     0,     0,     3,     4,     3,
       6,     5
};
static const short yydefgoto[] =
{
      -1,     2,     3,     4,     8
};
static const short yypact[] =
{
      -2,    -1,     4,-32768,     0,     2,-32768,    -2,-32768,    -2,
  -32768,-32768
};
static const short yypgoto[] =
{
  -32768,    -7,-32768,-32768,-32768
};
static const short yytable[] =
{
      10,     1,    11,     5,     6,     0,     7,     9
};
static const short yycheck[] =
{
       7,     3,     9,     4,     0,    -1,     6,     5
};
]])

AT_CLEANUP
